/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  6                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
motored_pressure_mass
{
    type          scalarCodedSource;

    active          true;
    
    name    sourceTime;

  

    scalarCodedSourceCoeffs
    {
         selectionMode   all;
	    fields      (rho U h #include"$FOAM_CASE/constant/source_specie/specieSource1_GRI.foam");

        codeInclude
        #{

        #};

        codeCorrect
        #{
//            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{
            scalar P0m =4.5e6;//2.65e+06;
            scalar tc = 0.05;
            scalar n = 1.2504;
            scalar t0 = 0.025;
            scalar g = 3.9691;//3.60555;


            // Read the current time
            scalar t = mesh().time().value();

            // Read the density of the system
            const volScalarField& rho_sys =  mesh_.lookupObject<volScalarField>("rho");
            const volScalarField& P_sys =  mesh_.lookupObject<volScalarField>("p");

            const vectorField& C = mesh_.C();                    // List of cell centres
	    const scalarField& V = mesh_.V();                    // List of cell volumes
            scalarField& massSource = eqn.source();                //defining source
            const scalar mdot = ((P0m*(pow(g,2))*n*pow(constant::mathematical::pi,2)*(2*t-2*t0))/ (pow(tc,2)*pow(((pow(g,2)*pow(constant::mathematical::pi,2)*pow((t-t0),2))/pow(tc,2)+1),(n+1))));
            forAll(C, i)
            {
                massSource[i] =  mdot*rho_sys[i]/P_sys[i]*V[i];

            }
  //          Pout << "***codeAddSup***" << endl;
        #};

        codeSetValue
        #{
    //        Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    sourceTimeCoeffs
    {
         $scalarCodedSourceCoeffs;
    }
}




motored_pressure_momentum
{
    type         vectorCodedSource;

    active          true;
    
    name    sourceTime3;

  

    vectorCodedSourceCoeffs
    {
         selectionMode   all;
	    fields      (U);

        codeInclude
        #{

        #};

        codeCorrect
        #{
      //      Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{

            // Read the current time
            volVectorField myVel = mesh_.lookupObject<volVectorField>("U");
          
            const vectorField& C = mesh_.C();                    // List of cell centres
            vectorField& momentumSource = eqn.source();                //defining source
            forAll(C, i)
            {
                momentumSource[i].x() = momentumSource[i].x() * myVel[i].x();
                momentumSource[i].y() = momentumSource[i].y() * myVel[i].y();
                momentumSource[i].z() = momentumSource[i].z() * myVel[i].z();
            }
        //    Pout << "***codeAddSup***" << endl;
        #};

        codeSetValue
        #{
         //   Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    sourceTime3Coeffs
    {
         $vectorCodedSourceCoeffs;
    }
}

motored_pressure_energy
{
    type          scalarCodedSource;

    active          true;
    
    name    sourceTime4;

  

    scalarCodedSourceCoeffs
    {
        selectionMode   all;
	    fields      (h);

        codeInclude
        #{

        #};

        codeCorrect
        #{
        //    Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{
	        volScalarField enthalpy = mesh_.lookupObject<volScalarField>("h");
            const vectorField& C = mesh_.C();                    // List of cell centres
            scalarField& energySource = eqn.source();                //defining source
            forAll(C, i)
            {
                energySource[i] *= (enthalpy[i]);
            }
        //    Pout << "***codeAddSup***" << endl;
        #};

        codeSetValue
        #{
        //    Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    sourceTime4Coeffs
    {
         $scalarCodedSourceCoeffs;
    }
}
#include"$FOAM_CASE/constant/source_specie/specieSource2_GRI.foam"
